name: CI

on:
  pull_request:
    branches:
      - master

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
            env.ACTIONS_CACHE_URL=${{ env.ACTIONS_CACHE_URL }}
            env.ACTIONS_RUNTIME_TOKEN=${{ env.ACTIONS_RUNTIME_TOKEN }}
          buildkitd-flags: --debug

      # 🔍 诊断步骤：验证 GHA 缓存是否可用
      - name: Debug - Print cache environment variables
        run: |
          echo "ACTIONS_CACHE_URL=${ACTIONS_CACHE_URL:-'NOT SET'}"
          echo "ACTIONS_RUNTIME_TOKEN=${ACTIONS_RUNTIME_TOKEN:0:20}... (truncated)"
          docker buildx ls

      # 🔍 诊断步骤：最小化测试 GHA 缓存读写
      - name: Debug - Test GHA cache with minimal build
        run: |
          cat > Dockerfile.test <<'EOF'
          FROM alpine:3.19
          RUN --mount=type=cache,id=test-cache,target=/cache \
              echo "Testing cache..." && \
              date > /cache/timestamp.txt && \
              cat /cache/timestamp.txt
          EOF
          
          echo "=== First build (should export cache) ==="
          docker buildx build \
            --progress=plain \
            --cache-to=type=gha,mode=max,scope=test-minimal \
            -f Dockerfile.test .
          
          echo "=== Second build (should import cache) ==="
          docker buildx build \
            --progress=plain \
            --cache-from=type=gha,scope=test-minimal \
            --cache-to=type=gha,mode=max,scope=test-minimal \
            -f Dockerfile.test .

      - name: Lint & Test (via Docker stage; collects reports)
        run: |
          set -eux
          echo "CACHE_FROM=${CACHE_FROM}"
          echo "CACHE_TO=${CACHE_TO}"
          make lint test reports
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
          CACHE_FROM: type=gha,scope=cms-ci
          CACHE_TO: type=gha,mode=max,scope=cms-ci

      - name: Inject report metadata (branch & PR)
        if: always()
        env:
          BRANCH_NAME: ${{ github.head_ref }}
          PR_NUMBER: ${{ github.event.pull_request.number || 'N/A' }}
        run: |
          bash ./.github/scripts/inject-report-metadata.sh

      - name: Upload Pages artifact (from test/)
        if: always()
        uses: actions/upload-pages-artifact@v4
        with:
          name: backend-test-reports
          path: reports

  deploy-reports:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    concurrency:
      group: reports-${{ github.ref_name }}
      cancel-in-progress: true
    environment:
      name: reports-${{ github.ref_name }}
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5
        with:
          artifact_name: backend-test-reports
