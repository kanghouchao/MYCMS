# このプロジェクト用サンプル環境変数（Spring Boot / Java 向け）
# - このファイルに実際のシークレットやパスワードを直接記載しないでください。機密情報は `.env` に配置し、CI やシークレットマネージャーで管理してください。
# - 設定は `backend/src/main/resources/application.yml` とリポジトリルートの `docker-compose.yml` に基づいています（サービス名: database, redis, backend, frontend）。

# Application
APP_NAME=OliCMS
APP_ENV=development
APP_DEBUG=false
APP_URL=http://oli-cms.test

# JWT
APP_JWT_SECRET=replace-with-a-secure-random-value
APP_JWT_EXPIRATION=86400

# -----------------------------
# Database (PostgreSQL)
# docker-compose のサービス名 `database` をホスト名として使用します
# アプリケーションは `DB_*` 系の環境変数を参照します。docker-compose と互換性を保つため `POSTGRES_*` と `SPRING_*` も残しています。
# 例 JDBC URL: jdbc:postgresql://<host>:<port>/<database>
POSTGRES_DB=cms
POSTGRES_USER=cms
POSTGRES_PASSWORD=changeme

# 新しいアプリケーション変数（推奨）：
DB_HOST=database
DB_PORT=5432
DB_NAME=cms
DB_USERNAME=cms
DB_PASSWORD=changeme
# DB SSL/証明書（production では適切に設定）: possible values: disable, allow, prefer, require, verify-ca, verify-full
DB_SSLMODE=require
DB_SSL=true
DB_SSLROOTCERT=

# HikariCP（接続プール）チューニング（任意、デフォルトは application.yml に設定）
DB_HIKARI_MINIMUM_IDLE=2
DB_HIKARI_MAXIMUM_POOL_SIZE=10
DB_HIKARI_IDLE_TIMEOUT=600000
DB_HIKARI_MAX_LIFETIME=1800000
DB_HIKARI_CONNECTION_TIMEOUT=30000
DB_HIKARI_LEAK_DETECTION_THRESHOLD=2000


# -----------------------------
# JPA / Hibernate
SPRING_JPA_HIBERNATE_DDL_AUTO=update
SPRING_JPA_SHOW_SQL=true
SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true

# -----------------------------
# Redis
# docker-compose の redis サービスを利用する場合、ホスト名は `redis` になります。
# アプリケーションは `REDIS_*` 系の環境変数を参照します。古い `SPRING_REDIS_*` も互換性のため残しています。
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=changeme
REDIS_DATABASE=0

# Redis 接続/クライアント設定
REDIS_SSL=false
REDIS_TIMEOUT=2000
REDIS_CLIENT_TYPE=lettuce

# Lettuce プール設定
REDIS_LETTUCE_POOL_MAX_ACTIVE=8
REDIS_LETTUCE_POOL_MAX_IDLE=8
REDIS_LETTUCE_POOL_MIN_IDLE=0
REDIS_LETTUCE_POOL_MAX_WAIT=2000

# Cache-specific options
REDIS_CACHE_TTL_MS=600000
REDIS_CACHE_NULL_VALUES=false
REDIS_CACHE_USE_KEY_PREFIX=true
REDIS_CACHE_KEY_PREFIX=oli:cache:


# -----------------------------
# Server
# 注意：リポジトリ内の `application.yml` のデフォルトポートは 8080 ですが、docker-compose/Traefik の設定ではバックエンドがロードバランサ用に 8000 を使用しています。実際のイメージ／デプロイに合わせて選択してください。
SERVER_PORT=8080

# -----------------------------
# JWT
APP_JWT_SECRET=replace-with-a-secure-random-value
APP_JWT_EXPIRATION=86400

# -----------------------------
# Mail (Spring Mail)
SPRING_MAIL_HOST=smtp.example.com
SPRING_MAIL_PORT=587
SPRING_MAIL_USERNAME=your@email.example
SPRING_MAIL_PASSWORD=changeme
SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
MAIL_FROM_ADDRESS=you@example.com
MAIL_FROM_NAME=CMD_ADMIN

# -----------------------------
# テナント検証 API（内部サービスの URL）
# バックエンドが実際にリッスンしているポートに合わせて調整してください（例: http://backend:8080 や http://backend:8000）。
TENANT_VALIDATION_API_URL=http://backend:8080/tenant

# -----------------------------
# 使用方法：
# 1) このファイルを `.env` にコピーし、`changeme` やプレースホルダを実際のシークレットに置き換えてください。
# 2) CI やコンテナオーケストレーション環境ではシークレットマネージャーを使用し、実際の鍵をリポジトリにコミットしないでください。
